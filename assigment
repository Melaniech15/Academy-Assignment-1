// Challenge 1: Reverse a String
function reverseString(str: string): string {
  return str.split('').reverse().join('');
}
console.log(reverseString("hello"));

// Challenge 2: Count Vowels
function countVowels(str: string): number {
  const vowels = "aeiou";
  let count = 0;
  for (let char of str.toLowerCase()) {
    if (vowels.includes(char)) {
      count++;
    }
  }
  return count;
}
console.log(countVowels("typescript")); 

// Challenge 3: Find the Missing Number
function findMissingNumber(arr: number[]): number {
  const n = arr.length + 1;
  const expectedSum = (n * (n + 1)) / 2;
  const actualSum = arr.reduce((sum, num) => sum + num, 0);
  return expectedSum - actualSum;
}
console.log(findMissingNumber([1, 2, 4, 5, 6]));

// Challenge 4: Find the First Non-Repeating Character
function firstNonRepeatingChar(str: string): string | null {
  const charCount = new Map<string, number>();
  for (let idx of str) {
    charCount.set(idx, (charCount.get(idx) || 0) + 1);
  }
  for (let i of str) {
    if (charCount.get(i) === 1) {
      return i;
    }
  }
  return null;
}
console.log(firstNonRepeatingChar("swiss")); 
console.log(firstNonRepeatingChar("racecar")); 

// Challenge 5: Deep Object Comparison
function deepEqual(obj1: any, obj2: any): boolean {
  if (obj1 === obj2) return true;
  if (typeof obj1 !== "object" || typeof obj2 !== "object" || obj1 === null || obj2 === null) return false;
  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);
  if (keys1.length !== keys2.length) return false;
  for (const key of keys1) {
    if (!deepEqual(obj1[key], obj2[key])) return false;
  }
  return true;
}
console.log(deepEqual({ a: 1, b: { c: 2 } }, { a: 1, b: { c: 2 } })); 
console.log(deepEqual({ a: 1, b: { c: 2 } }, { a: 1, b: { c: 3 } })); 

// Challenge 6: LRU Cache Implementation
class LRUCache {
  private capacity: number;
  private cache: Map<number, number>;

  constructor(capacity: number) {
    this.capacity = capacity;
    this.cache = new Map();
  }

  get(key: number): number | null {
    if (!this.cache.has(key)) return null;
    const value = this.cache.get(key)!;
    this.cache.delete(key);
    this.cache.set(key, value);
    return value;
  }

  put(key: number, value: number): void {
    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.cache.size >= this.capacity) {
      const oldestKey = this.cache.keys().next().value;
      if (oldestKey !== undefined) {
        this.cache.delete(oldestKey);
      }
    }
    this.cache.set(key, value);
  }
}

const cache = new LRUCache(2);
cache.put(1, 1);
cache.put(2, 2);
console.log(cache.get(1));
cache.put(3, 3); 
console.log(cache.get(2)); 


// Challenge 7: TypeScript Task Manager
class TaskManager {
  private tasks: { id: number; name: string; status: string }[] = [];
  private currentId: number = 1;

  addTask(name: string): void {
    this.tasks.push({ id: this.currentId++, name, status: "In Progress" });
  }

  completeTask(id: number): void {
    const task = this.tasks.find(task => task.id === id);
    if (task) {
      task.status = "Completed";
    }
  }

  displayTasks(): void {
    this.tasks.forEach(task => {
      console.log(`Task ID: ${task.id}, Name: "${task.name}", Status: ${task.status}`);
    });
  }
}

const taskManager = new TaskManager();
taskManager.addTask("Learn TypeScript");
taskManager.completeTask(1);
taskManager.displayTasks();
